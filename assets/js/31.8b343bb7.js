(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{427:function(e,i,t){"use strict";t.r(i);var n=t(42),s=Object(n.a)({},(function(){var e=this,i=e.$createElement,t=e._self._c||i;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"configuration-overview"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#configuration-overview"}},[e._v("#")]),e._v(" Configuration Overview")]),e._v(" "),t("p",[e._v("There are two types of configurations - static and dynamic. Static configurations are defined in files or environment variables, requiring restarting "),t("em",[e._v("NotifyBC")]),e._v(" to take effect, whereas dynamic configurations are defined in databases and updates take effect immediately.")]),e._v(" "),t("h2",{attrs:{id:"static-configurations"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#static-configurations"}},[e._v("#")]),e._v(" Static Configurations")]),e._v(" "),t("p",[e._v("Most static configurations are specified in file "),t("em",[e._v("/src/config.ts")]),e._v(". If you need to change, instead of updating "),t("em",[e._v("/src/config.ts")]),e._v(" file, create local file "),t("em",[e._v("/src/config.local.ts")]),e._v(" or environment specific file "),t("em",[e._v("/src/config.<env>.ts")]),e._v(", which is only included when environment variable "),t("em",[e._v("NODE_ENV")]),e._v(" equals "),t("em",[e._v("<env>")]),e._v(". Besides "),t("em",[e._v("ts")]),e._v(", "),t("em",[e._v("js")]),e._v(" and "),t("em",[e._v("json")]),e._v(" file extension are also supported. Content in these files are deeply merged in following ascending precedence")]),e._v(" "),t("ul",[t("li",[e._v("default file "),t("em",[e._v("/src/config.ts")])]),e._v(" "),t("li",[e._v("local file "),t("em",[e._v("/src/config.local.ts")])]),e._v(" "),t("li",[e._v("environment specific file "),t("em",[e._v("/src/config.<env>.ts")])])]),e._v(" "),t("div",{staticClass:"custom-block warning"},[t("p",{staticClass:"custom-block-title"},[e._v("Run build script whenever changing file in /src")]),e._v(" "),t("p",[e._v("Every time a file under "),t("em",[e._v("/src")]),e._v(", including config files, is updated, run "),t("code",[e._v("yarn build")]),e._v(" before restarting "),t("em",[e._v("NotifyBC")]),e._v(" to take effect.")])]),e._v(" "),t("p",[e._v("Following configs should be customized per installation")]),e._v(" "),t("ul",[t("li",[t("RouterLink",{attrs:{to:"/docs/config/adminIpList.html"}},[e._v("Admin IP List")])],1),e._v(" "),t("li",[t("RouterLink",{attrs:{to:"/docs/config/reverseProxyIpLists.html"}},[e._v("Reverse Proxy IP Lists")])],1),e._v(" "),t("li",[t("RouterLink",{attrs:{to:"/docs/config/httpHost.html"}},[e._v("HTTP Host")])],1),e._v(" "),t("li",[t("RouterLink",{attrs:{to:"/docs/config/smtp.html"}},[e._v("SMTP")])],1)]),e._v(" "),t("p",[e._v("In addition, if installing from source code")]),e._v(" "),t("ul",[t("li",[t("RouterLink",{attrs:{to:"/docs/config/database.html"}},[e._v("Database")])],1),e._v(" "),t("li",[t("RouterLink",{attrs:{to:"/docs/config/internalHttpHost.html"}},[e._v("Internal HTTP Host")])],1)]),e._v(" "),t("p",[e._v("Customizing other configs only if needed.")]),e._v(" "),t("h2",{attrs:{id:"dynamic-configurations"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#dynamic-configurations"}},[e._v("#")]),e._v(" Dynamic Configurations")]),e._v(" "),t("p",[e._v("Dynamic configs are managed using REST "),t("RouterLink",{attrs:{to:"/docs/api-config/"}},[e._v("configuration api")]),e._v(".")],1),e._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[e._v("Why Dynamic Configs?")]),e._v(" "),t("p",[e._v("Dynamic configs are needed in cases such as")]),e._v(" "),t("ul",[t("li",[e._v("to allow define service-specific configs such as message templates")]),e._v(" "),t("li",[e._v("in a multi-node deployment, configs can be generated by one node (typically master) and shared with other nodes")])])])])}),[],!1,null,null,null);i.default=s.exports}}]);